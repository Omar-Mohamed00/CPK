<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
    <style>
        .chart-container {
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .chart-title {
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
            margin-bottom: 15px;
        }

        .clearfix {
            clear: both;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-4">
                <div class="chart-container">
                    <h4>Line1003</h4>
                    <canvas id="canvasLine1003" width="400" height="400"></canvas>
                </div>
            </div>
            <div class="col-md-4">
                <div class="chart-container">
                    <h4>Line1010</h4>
                    <canvas id="canvasLine1010" width="400" height="400"></canvas>
                </div>
            </div>
            <div class="col-md-4">
                <div class="chart-container">
                    <h4>Line1011</h4>
                    <canvas id="canvasLine1011" width="400" height="400"></canvas>
                </div>
            </div>
            <div class="col-md-4">
                <div class="chart-container">
                    <h4>Line10113</h4>
                    <canvas id="canvasLine10113" width="400" height="400"></canvas>
                </div>
            </div> 
            <div class="col-md-4">
                <div class="chart-container">
                    <h4>Line1013</h4>
                    <canvas id="canvasLine1013" width="400" height="400"></canvas>
                </div>
            </div>
            <div class="col-md-4">
                <div class="chart-container">
                    <h4>Line1014</h4>
                    <canvas id="canvasLine1014" width="400" height="400"></canvas>
                </div>
            </div>

        </div>
    </div>

    
</body>
</html> 
@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.17/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.8/dist/chart.umd.js"></script>
    <script>
        "use strict";
        var connection = new signalR.HubConnectionBuilder().withUrl("/dataHub").build();

        if (!window.myCharts) {
            window.myCharts = {};
        }


        $(function () {
            connection.start().then(function () {
                console.log("✅ SignalR Connected!");
                InvokeSales();
            }).catch(function (err) {
                console.error("❌ SignalR Connection Error:", err.toString());
            });
        });

        function InvokeSales() {
            connection.invoke("Sendline1003")
                .then(() => console.log("✅ Successfully invoked Sendline1003"))
                .catch(err => console.error("❌ Error invoking Sendline1003:", err.toString()));
            connection.invoke("Sendline1010")
                .then(() => console.log("✅ Successfully invoked Sendline1010"))
                .catch(err => console.error("❌ Error invoking Sendline1010:", err.toString()));
            connection.invoke("Sendline1011")
                .then(() => console.log("✅ Successfully invoked Sendline1011"))
                .catch(err => console.error("❌ Error invoking Sendline1011:", err.toString()));
            connection.invoke("Sendline10113")
                .then(() => console.log("✅ Successfully invoked Sendline10113"))
                .catch(err => console.error("❌ Error invoking Sendline10113:", err.toString()));

            connection.invoke("Sendline1013")
                .then(() => console.log("✅ Successfully invoked Sendline1013"))
                .catch(err => console.error("❌ Error invoking Sendline1013:", err.toString()));


            connection.invoke("Sendline1014")
                .then(() => console.log("✅ Successfully invoked Sendline1014"))
                .catch(err => console.error("❌ Error invoking Sendline1014:", err.toString()));
        }
        // ✅ Listen for real-time updates
        connection.on("ReceivedLine1003ForGraph", function (Line1003ForGraph) {
            console.log("✅ Received Data for Line1003:", Line1003ForGraph);
            BindLine1003ToGraph(Line1003ForGraph);
        });
        connection.on("ReceivedLine1010ForGraph", function (Line1010ForGraph) {
            console.log("✅ Received Data for Line1010:", Line1010ForGraph);
            BindLine1010ToGraph(Line1010ForGraph);
        });
        connection.on("ReceivedLine1011ForGraph", function (Line1011ForGraph) {
            console.log("✅ Received Data for Line1011:", Line1011ForGraph);
            BindLine1011ToGraph(Line1011ForGraph);
        });
        connection.on("ReceivedLine10113ForGraph", function (Line10113ForGraph) {
            console.log("✅ Received Data for Line10113:", Line10113ForGraph);
            BindLine10113ToGraph(Line10113ForGraph);
        });
        connection.on("ReceivedLine1013ForGraph", function (Line1013ForGraph) {
            console.log("✅ Received Data for Line1013:", Line1013ForGraph);
            BindLine1013ToGraph(Line1013ForGraph);
        });
        connection.on("ReceivedLine1014ForGraph", function (Line1014ForGraph) {
            console.log("✅ Received Data for Line1014:", Line1014ForGraph);
            BindLine1014ToGraph(Line1014ForGraph);
        });
        setInterval(() => {
            console.log("🔄 Requesting latest line1003 data...");
            connection.invoke("Sendline1003")
                .catch(err => console.error("❌ Error invoking Sendline1003:", err.toString()));
        }, 5000); // Calls every 5 seconds

        setInterval(() => {
            console.log("🔄 Requesting latest line1010 data...");
            connection.invoke("Sendline1010")
                .catch(err => console.error("❌ Error invoking Sendline1010:", err.toString()));
        }, 5000); // Calls every 5 seconds
        setInterval(() => {
            console.log("🔄 Requesting latest line1011 data...");
            connection.invoke("Sendline1011")
                .catch(err => console.error("❌ Error invoking Sendline1011:", err.toString()));
        }, 5000); // Calls every 5 seconds
        setInterval(() => {
            console.log("🔄 Requesting latest line10113 data...");
            connection.invoke("Sendline10113")
                .catch(err => console.error("❌ Error invoking Sendline10113:", err.toString()));
        }, 5000); // Calls every 5 seconds
        setInterval(() => {
            console.log("🔄 Requesting latest line1013 data...");
            connection.invoke("Sendline1013")
                .catch(err => console.error("❌ Error invoking Sendline1013:", err.toString()));
        }, 5000); // Calls every 5 seconds
        setInterval(() => {
            console.log("🔄 Requesting latest line1014 data...");
            connection.invoke("Sendline1014")
                .catch(err => console.error("❌ Error invoking Sendline1014:", err.toString()));
        }, 5000); // Calls every 5 seconds
        function BindDataToGraph(chartId, LineForGraph, label, timestampKey, valueKey) {
            const canvasElement = document.getElementById(chartId);
            if (!canvasElement) {
                console.error(`❌ Canvas element '${chartId}' not found!`);
                return;
            }

            if (!window.myCharts[chartId]) {
                const context = canvasElement.getContext('2d');
                window.myCharts[chartId] = new Chart(context, {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [{
                            label: label,
                            data: [],
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 2,
                            fill: false,
                            tension: 0.1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: { display: true, title: { display: true, text: 'Timestamp' } },
                            y: { beginAtZero: true, title: { display: true, text: 'Values' } }
                        }
                    }
                });
            }

            const myChart = window.myCharts[chartId];

            if (!Array.isArray(LineForGraph) || LineForGraph.length === 0) {
                console.warn(`⚠️ No data received for ${chartId}`);
                return;
            }

            console.log(`📊 Updating ${chartId} with new data...`);

            // ✅ Clear only old data and keep chart dynamic
            myChart.data.labels = [];
            myChart.data.datasets[0].data = [];

            LineForGraph.forEach(item => {
                const timestamp = item[timestampKey] || item.timestamp;
                const value = item[valueKey] || item.value;

                if (timestamp && value !== undefined) {
                    const formattedTime = new Date(timestamp).toLocaleTimeString();
                    myChart.data.labels.push(formattedTime);
                    myChart.data.datasets[0].data.push(value);
                } else {
                    console.warn(`⚠️ Skipping invalid data for ${chartId}:`, item);
                }
            });

            myChart.update();
            console.log(`✅ Chart '${chartId}' successfully updated.`);
        }


        function BindLine1003ToGraph(Line1003ForGraph) {
            BindDataToGraph("canvasLine1003", Line1003ForGraph, "Values Over Time (Line1003)", "cpkLin3We3Timestamp", "cpkLin3We3Value");
        }
        function BindLine1010ToGraph(Line1010ForGraph) {
            BindDataToGraph("canvasLine1010", Line1010ForGraph, "Values Over Time (Line1010)", "cpkLin10We10Timestamp", "cpkLin10We10Value");
        }
        function BindLine1011ToGraph(Line1011ForGraph) {
            BindDataToGraph("canvasLine1011", Line1011ForGraph, "Values Over Time (Line1011)", "cpkLin11We11Timestamp", "cpkLin11We11Value");
        }
        function BindLine10113ToGraph(Line10113ForGraph) {
            BindDataToGraph("canvasLine10113", Line10113ForGraph, "Values Over Time (Line10113)", "cpkLin3We3Timestamp", "cpkLin3We3Value");
        }
        function BindLine1013ToGraph(Line1013ForGraph) {
            BindDataToGraph("canvasLine1013", Line1013ForGraph, "Values Over Time (Line1013)", "cpkLine13Wei13Timestamp", "cpkLine13Wei13Value");
        }
        function BindLine1014ToGraph(Line1014ForGraph) {
            BindDataToGraph("canvasLine1014", Line1014ForGraph, "Values Over Time (Line1014)", "cpkLine14We14Timestamp", "cpkLine14We14Value");
        }

    </script>
}